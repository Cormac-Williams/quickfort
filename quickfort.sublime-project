{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"XBu",
				"XButton1SendsAltF4"
			],
			[
				"Las",
				"LastCommandLine"
			],
			[
				"La",
				"LastCommandLine"
			],
			[
				"Sele",
				"SelectedFolder"
			],
			[
				"Re",
				"RepeatPattern"
			],
			[
				"Sel",
				"SelectedSheetIndex"
			],
			[
				"Selected",
				"SelectedFile"
			],
			[
				"Ext",
				"ExtractPathFromWindow"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/code/qf/trunk/qfconvert/blueprint.py",
			"settings":
			{
				"buffer_size": 9039,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/quickfort/lib/hotkeys.ahk",
			"settings":
			{
				"buffer_size": 8541,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/util.py",
			"settings":
			{
				"buffer_size": 1625,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 124 files for \"Bunch\" (regex)\n\nC:\\code\\qf\\trunk\\qfconvert\\filereader.py:\n   11  from geometry import Point\n   12  from grid import Grid, GridLayer\n   13: from util import Bunch\n   14  \n   15  \n   ..\n  224          comment = ''\n  225  \n  226:     return Bunch(build_type=build_type, start=start,\n  227          start_comment=start_comment, comment=comment)\n  228  \n\nC:\\code\\qf\\trunk\\qfconvert\\util.py:\n   48  \n   49  \n   50: class Bunch:\n   51      \"\"\"\n   52      Like a dynamic struct. Usage:\n   53:     >>> point = Bunch(datum=y, squared=y*y, coord=x)\n   54      >>> if point.squared > threshold:\n   55      >>>     point.isok =\n\nC:\\code\\qf\\trunk\\quickfort\\readme.txt:\n  321  \n  322  * If the script goes off the rails for some reason, use Alt+C to cancel it. If\n  323:   you've built a bunch of beds but ran out before the script finished, for\n  324    example, you can use the Alt+X key while in DF's q menu. This causes QF to\n  325    send x 30 times to DF - an easy way to remove a large region of buildings\n\n5 matches across 3 files\n\n\nSearching 124 files for \"parse_sheet_details\" (regex)\n\nC:\\code\\qf\\trunk\\qfconvert\\filereader.py:\n  142  \n  143      # parse top line details\n  144:     details = parse_sheet_details(top_line)\n  145  \n  146      # break up lines into z-layers separated by #> or #<\n  ...\n  186  \n  187  \n  188: def parse_sheet_details(top_line):\n  189      \"\"\"\n  190      Parses out build type, start pos/comment, and general comment\n\n2 matches in 1 file\n\n\nSearching 124 files for \"print\" (regex)\n\nC:\\code\\qf\\trunk\\Blueprints\\Examples\\screw-pump-tower-build.csv:\n    1: \"#build IMPORTANT: Start this blueprint at the BOTTOM level of your tower shaft, and repeat (Alt+R) UPWARDS. The bottom pump must be placed first onto 2 floor tiles, to provide support for the pumps above. Each 2 floors requires 2 enormous corkscrews, 2 blocks, 2 pipes/tubes and 2 doors.\\n\\nBe careful when placing screw pumps in QF blueprints. They anchor from their bottom tile (when oriented N/S) and from their right tile (when oriented E/W).\",,,,\n    2  `,`,,`,#\n    3  ,d,~,`,#\n\nC:\\code\\qf\\trunk\\Blueprints\\Examples\\screw-pump-tower-dig.csv:\n    1: \"#dig Example of repeatable screw pump tower.\\n\\nOn the bottom level, water is taken up from the south channeled tile. On the top level, water will exit the pump onto the tile directly south of the pump. See the DF wiki for a detailed explanation of screw pump technology.\\n\\nEvery repetition of this blueprint completes 2 z-levels of tower.\\n\\nIMPORTANT: Start from the top z-level and repeat (Alt+R) down. Then on the bottommost level, change the upper channel designation to mine. This will let us place the bottommost screw pump here.\",,,,\n    2  `,`,h,`,#\n    3  `,`,d,`,#\n\nC:\\code\\qf\\trunk\\Blueprints\\Tests\\empty.csv:\n    1: #dig Empty blueprint test\n    2  \n\nC:\\code\\qf\\trunk\\Blueprints\\TheQuickFortress\\_ReadMe.txt:\n    1  This is Buketgeshud, or translated from Dwarvish, The Quick Fortress.\n    2  \n    3: It is a set of basic CSV blueprints for Quickfort, demonstrating its\n    4  use in assembling an entire basic (if incomplete) fort.\n    5  \n    6: Buketgeshud is designed around a 30x20 blueprint with a common central\n    7: staircase/corridor layout. Blueprints can be repeated in any direction to\n    8  connect in a modular fashion with adjacent 30x20 areas. A fortresswide\n    9  example recirculating waterfall/plumbing system is included as an overlay\n   ..\n   16  * Clear a 30 wide x 20 high region of trees on the surface. This should be\n   17    uninterrupted flat ground with soil (so that we can place farms below).\n   18:   Deconstruct your wagon. Consider building Blueprints/General/embarding-build.csv\n   19:   and -stockpiles.csv first (outside of your 30x20 footprint).\n   20  \n   21  * Run surface-1-dig.csv. You'll want to put the cursor in the middle of the\n   ..\n   34  * Run surface-3-stockpiles.csv to designate some area-appropriate stockpiles on\n   35    the surface and below. Position the cursor for this\n   36:   and all future Buketgeshud blueprints on the top left stair tile of the\n   37    central staircase.\n   38  \n   39  * Run surface-3-stockpiles.csv to designate some area-appropriate stockpiles on\n   40    the surface and below. Position the cursor for this and all other Buketgeshud\n   41:   blueprints on the top left stair tile of the central staircase.\n   42  \n   43  * Run surface-4-adjust.csv to adjust the stockpiles' settings and designate your\n   ..\n   53    occurred yet. Hit Alt+R and repeat 6 down.\n   54  \n   55: * Other purpose-specific blueprints (e.g. bedrooms-*.csv) can now be placed on\n   56:   any desired Z-level along our central shaft; all these blueprints are based\n   57    off the central shaft/tunnel layout used in basic-dig.csv. Consider dumping\n   58:   rock on newly dug levels before running -build.csv blueprints.\n   59  \n   60  * Optionally use basic-stockpiles.csv and basic-adjust.csv to designate\n   ..\n   67    (you left it empty, didn't you?) and repeat dig plumbing-1-dig.csv on Z-levels\n   68    below that. Repeat for plumbing-2-build.csv and waterfall-2-build.csv in that\n   69:   order - see the blueprints' comments for complete details. You'll also need a\n   70    reservoir at the bottom (not included).\n   71  \n\nC:\\code\\qf\\trunk\\Blueprints\\TheQuickFortress\\plumbing-2-build.csv:\n    1: \"#build start(15;10; Top left corner of central stairs) Placing grates, doors, and screw pumps for the fortwide waterfall plumbing.\\n\\nStart this blueprint from the BOTTOM of the screw pump tower (lowest Z-level), and repeat UPWARDS. Each repetition does 2 floors. Directly above the top level of plumbing you build should be the waterfall plumbing floor. \",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n    2  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#\n    3  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#\n\nC:\\code\\qf\\trunk\\Blueprints\\TheQuickFortress\\surface-1-dig.csv:\n    1: \"#dig start(15;10; Top left corner of central stairs) Surface and farm/depot level digging. We also channel out a future path for invaders.\\n\\nConsider deforesting the entire 30x20 surface area before beginning. Note that this blueprint will place from the center of the 30x20 area.\\n\\nThe 3rd z-level in this file just digs stairs; if you want to install the waterfall plumbing system later, leave this 3rd level EMPTY for now and start the base proper below that; use basic-dig.csv to dig out areas for future use below.\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n    2  `,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,`,#\n    3  `,,,,,,,,,,,,,,,,,,,,,,`,h,,,,,~,~,#\n\nC:\\code\\qf\\trunk\\Blueprints\\TheQuickFortress\\surface-5-build-walls.csv:\n    1: #build start(15;10; Top left corner of central stairs) Builds walls and bridges on the surface level. Note that the entrance on the southern wall juts out from the 30x20 footprint by 3 tiles; the southern bridge extends beyond the edge of the blueprint itself.\\n\\nYou'll need to add and connect levers yourself.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n    2  Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,Cw,#\n    3  Cw,,,,,,,,,,,,,,,,,,,,,,Cw,,,,,,gd(2x3),,#\n\nC:\\code\\qf\\trunk\\Blueprints\\TheQuickFortress\\waterfall-1-dig.csv:\n    1: \"#dig start(15;10; Top left corner of central stairs) Top-level plumbing for the fortwide waterfall system. This belongs below the surface and depot Z-levels.\\n\\nWater source should come from 2 tiles in lower right. All lower floors in this template have unused space in these lower right tiles, meant for pumping water up from a reservoir below the fort (this is intended to be a recirculating waterfall). There's also unused space in this blueprint for general use.\",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n    2  ,,,,i,,,,,,,,,,i,i,,,,,,,,,,i,,,,,#\n    3  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#\n\nC:\\code\\qf\\trunk\\copyrelease.bat:\n    2  mkdir release\n    3  mkdir release\\src\n    4: mkdir release\\blueprints\n    5  mkdir release\\config\n    6  \n    .\n   10  copy qfconvert\\release\\config\\* release\\config\n   11  copy quickfort\\release\\config\\* release\\config\n   12: copy /s blueprints release\\blueprints\n   13  \n   14  :: Copy source code\n\nC:\\code\\qf\\trunk\\qfconvert\\areaplotter.py:\n   34          \"\"\"\n   35          if self.debug:\n   36:             print \">>>> BEGIN AREA EXPANSION\"\n   37  \n   38          label = self.label\n   ..\n   62  \n   63          if self.debug:\n   64:             print Grid.str_area_labels(self.grid) + '\\n'\n   65:             print \"<<<< END AREA EXPANSION\"\n   66          self.label = label\n   67          return\n   ..\n   74  \n   75          if self.debug:\n   76:             print \">>>> BEGIN AREA DISCOVERY\"\n   77  \n   78          testarea = Area(\n   ..\n   83          while True:\n   84              if self.debug:\n   85:                 print Grid.str_area_labels(self.grid) + '\\n'\n   86:                 print '#### Marking largest plottable areas starting ' + \\\n   87                      'with label %s' % self.label\n   88  \n   ..\n   91              if not self.grid.is_area_plottable(testarea, True):\n   92                  if self.debug:\n   93:                     print Grid.str_area_labels(self.grid) + '\\n'\n   94:                     print \"#### Grid is completely plotted\"\n   95:                     print \"<<<< END AREA DISCOVERY\"\n   96                  return\n   97  \n\nC:\\code\\qf\\trunk\\qfconvert\\blueprint.py:\n    1: \"\"\"Blueprint class and associated processing functions.\"\"\"\n    2  \n    3  import re\n    .\n   15  from aliases import load_aliases, apply_aliases\n   16  \n   17: def get_blueprint_info(path):\n   18:     \"\"\"Returns information about the blueprint at path.\"\"\"\n   19      sheets = get_sheets(path)\n   20  \n   ..\n   25                  parse_file(path, sheet[1])\n   26              layers = FileLayers_to_GridLayers(layers)\n   27:             bp = Blueprint(sheet[0], layers, details)\n   28              s += '>>>> Sheet id %d\\n' % sheet[1]\n   29              s += bp.get_info() + '\\n'\n   ..\n   34          return s\n   35      else:\n   36:         raise Exception, \"No valid blueprints found in '%s'.\" % path\n   37  \n   38  \n   39: def process_blueprint_file(path, options):\n   40      \"\"\"\n   41:     Main routine for reading a blueprint, transforming it, and rendering\n   42:     keystrokes/macros required to plot or visualize the blueprint specified.\n   43      \"\"\"\n   44  \n   45      if options.debugfile:\n   46:         print \">>>> BEGIN INPUT FILE PARSING\"\n   47  \n   48      # parse sheetid\n   ..\n   54          sheetid = get_sheets(path)\n   55  \n   56:     # read in the blueprint\n   57      layers, details = parse_file(path, sheetid)\n   58  \n   59      if options.debugfile:\n   60:         print '#### Parsed %s' % path\n   61:         print FileLayer.str_layers(layers)\n   62  \n   63:     # apply aliases.txt to blueprint contents\n   64      aliases = load_aliases('config/aliases.txt')\n   65      layers = apply_aliases(layers, aliases)\n   66  \n   67:     # transform the blueprint\n   68      if options.transform:\n   69          if options.debugtransform:\n   70:             print \"#### Transforming with: %s\" % options.transform\n   71  \n   72          transforms = parse_transform_str(options.transform)\n   ..\n   77  \n   78          if options.debugfile:\n   79:             print \"#### Results of transform:\"\n   80:             print FileLayer.str_layers(layers)\n   81  \n   82      layers = FileLayers_to_GridLayers(layers)\n   ..\n   88              layers[0].grid.height)\n   89  \n   90:     # convert layers and other data to Blueprint\n   91:     bp = Blueprint('', layers, details)\n   92  \n   93      if options.debugfile:\n   94:         print \"<<<< END INPUT FILE PARSING\"\n   95  \n   96:     # get keys/macrocode to outline or plot the blueprint\n   97      if options.visualize:\n   98          keys = bp.trace_outline(options)\n   ..\n  103  \n  104      if options.debugsummary:\n  105:         print \">>>> BEGIN SUMMARY\"\n  106:         print \"---- Layers:\"\n  107          for i, layer in enumerate(bp.layers):\n  108:             print \"=\" * 20 + ' Layer %d ' % i + '=' * 20\n  109:             print \"Entering cursor position: %s\" % layer.start\n  110:             print \"\\n#### Commands:\"\n  111:             print str(layer.grid) + '\\n'\n  112:             print \"#### Area labels:\"\n  113:             print Grid.str_area_labels(layer.grid) + '\\n'\n  114:             print \"Route order: %s\" % ''.join(\n  115                  [layer.grid.get_cell(plot).label\n  116                      for plot in layer.plots]\n  117                  )\n  118:             print \"Layer onexit keys: %s\\n\" % layer.onexit\n  119:         print \"---- Overall:\"\n  120:         print \"Total key cost: %d\" % len(keys)\n  121:         print \"<<<< END SUMMARY\"\n  122  \n  123      return output\n  ...\n  141  \n  142  \n  143: class Blueprint:\n  144      \"\"\"\n  145:     Represents a single blueprint (csv file or sheet in xls/x file).\n  146      Provides high level methods for plotting, outlining, and retrieving\n  147:     information about the blueprint.\n  148      \"\"\"\n  149  \n  ...\n  157  \n  158      def plot(self, options):\n  159:         \"\"\"Plots a route through the blueprint.\"\"\"\n  160          buildconfig = BuildConfig(self.build_type)\n  161          keys = []\n  ...\n  220  \n  221      def get_info(self):\n  222:         \"\"\"Retrieve various bits of info about the blueprint.\"\"\"\n  223          cells = flatten(layer.grid.rows for layer in self.layers)\n  224          commands = [c.command for c in cells]\n  ...\n  227              cmdset.remove('')\n  228  \n  229:         # count the number of occurrences of each command in the blueprint\n  230          counts = [(c, commands.count(c)) for c in cmdset]\n  231          counts.sort(key=lambda x: x[1], reverse=True)\n  232          \n  233:         # make a row of repeating numbers to annotate the blueprint with\n  234          width = self.layers[0].grid.width\n  235          numbering_row = '  ' + ('1234567890' * (width // 10))[0:width]\n  236  \n  237:         # build the blueprint preview\n  238          preview = numbering_row\n  239          return textwrap.dedent(\"\"\"\n  240:             Blueprint name: %s\n  241              Build type: %s\n  242              Comment: %s\n  ...\n  258                  ', '.join(\"%s:%d\" % c for c in counts)\n  259                  ) + \\\n  260:             \"\\nBlueprint preview:\\n\" + \\\n  261                  '\\n'.join(\n  262                      Grid.str_commands(layer.grid.rows, annotate=True) + \\\n\nC:\\code\\qf\\trunk\\qfconvert\\filereader.py:\n    1: \"\"\"Blueprint file reading/parsing operations.\"\"\"\n    2  \n    3  import json\n    .\n   29  class FileLayer:\n   30      \"\"\"\n   31:     Represents the rows/cells of a single layer within a blueprint/sheet.\n   32      Includes an onexit member which specifies what keycodes should be used\n   33      to transition from one FileLayer to the next (in a list of FileLayers).\n   ..\n   63                  endat = cells.index('#') # find first # (row ender) in any\n   64                  if endat == 0:\n   65:                     raise Exception, \"Blueprint has '#' in unexpected cell.\"\n   66                  else:\n   67                      # trim off stuff from the found # to the right\n   ..\n   78  \n   79          if maxwidth == 0:\n   80:             raise Exception, \"Blueprint appears to be empty or zero-width.\"\n   81  \n   82          # Conform all rows to the same width\n   ..\n  178  \n  179      # if there's a line that starts with #, treat it as the last line of\n  180:     # the blueprint and trim off everything from there to the end of lines\n  181      for i, line in enumerate(lines):\n  182          if line and line[0] == '#':\n  ...\n  195      \"\"\"\n  196      Parses out build type, start pos/comment, and general comment\n  197:     from top line of blueprint. Returns an object with keyword\n  198      properties .build_type, .start, .start_comment, .comment\n  199      \"\"\"\n\nC:\\code\\qf\\trunk\\qfconvert\\grid.py:\n    1: \"\"\"Main storage classes for blueprint data used throughout qfconvert.\"\"\"\n    2  \n    3  from copy import deepcopy\n    .\n   37      \"\"\"\n   38      Represents a cartesian grid of cells corresponding to positions in\n   39:     a Dwarf Fortress map or QF blueprint.\n   40      \"\"\"\n   41  \n   ..\n  314          \"\"\"\n  315          rowstrings = []\n  316:         print annotate\n  317          if annotate:\n  318              # draw numbering ruler along the top\n\nC:\\code\\qf\\trunk\\qfconvert\\keystroker.py:\n  197                      # test if jumping an extra 10-unit step\n  198                      # would put us outside of the bounds of\n  199:                     # the blueprint (want to prevent)\n  200                      test = start + (jumpmove * (jumps + 1))\n  201  \n\nC:\\code\\qf\\trunk\\qfconvert\\qfconvert.py:\n    7  import cProfile\n    8  \n    9: import blueprint\n   10  \n   11  version = '2.00pre4'\n   ..\n   35      parser.add_option(\"-v\", \"--visualize\",\n   36                        action=\"store_true\", dest=\"visualize\", default=False,\n   37:                       help=\"just moves cursor around blueprint's perimeter\")\n   38      parser.add_option(\"-C\", \"--show-csv-parse\",\n   39                        action=\"store_true\", dest=\"debugfile\", default=False,\n   40:                       help=\"show blueprint parsing steps on stdout\")\n   41      parser.add_option(\"-X\", \"--show-transforms\",\n   42                        action=\"store_true\", dest=\"debugtransform\", default=False,\n   ..\n   57  \n   58      if len(args) < 1:\n   59:         parser.print_help()\n   60          return None, None\n   61  \n   ..\n   83      try:\n   84          if options.info:\n   85:             output = blueprint.get_blueprint_info(infile)\n   86          else:\n   87:             output = blueprint.process_blueprint_file(infile, options)\n   88  \n   89          if outfile:\n   ..\n   91                  outf.write(output)\n   92          else:\n   93:             print output\n   94      except Exception as ex:\n   95:         traceback.print_exc()\n   96          if outfile:\n   97              with open(outfile, 'w') as outf:\n   ..\n  101  \n  102  def main():\n  103:     \"\"\"Parse options file, parse and convert blueprint, and output result.\"\"\"\n  104      global options, args\n  105  \n  ...\n  112                  run()\n  113      except Exception as ex:\n  114:         print 'Error: ' + str(ex)\n  115  \n  116  \n\nC:\\code\\qf\\trunk\\qfconvert\\router.py:\n   17  \n   18      if debug:\n   19:         print Grid.str_area_labels(grid) + '\\n'\n   20:         print \">>>> BEGIN ROUTE PLANNING\"\n   21  \n   22      while (True):\n   ..\n   36  \n   37              if debug:\n   38:                 print \"#### Plotting area starting at %s, area %s\" % (\n   39                      nearest_pos, area)\n   40:                 print Grid.str_plottable(grid) + '\\n'\n   41  \n   42              # move cursor to the ending corner of the plotted area\n   ..\n   44  \n   45      if debug:\n   46:         print Grid.str_plottable(grid) + '\\n'\n   47:         print \"#### Plotted all areas\"\n   48:         print Grid.str_area_labels(grid)\n   49:         print \"Route replay sequence: %s\" % \\\n   50              ''.join([grid.get_cell(plot).label for plot in plots])\n   51:         print \"Cursor position now: %s\" % cursor\n   52:         print \"<<<< END ROUTE PLANNING\"\n   53  \n   54      return grid, plots, cursor\n\nC:\\code\\qf\\trunk\\qfconvert\\transformer.py:\n    1  \"\"\"\n    2: Transforms/repeats blueprint layers based on a sequence of transformation\n    3  commands.\n    4  \"\"\"\n    .\n   53  \n   54  class Transformer:\n   55:     \"\"\"Handles transformation of a blueprint based on a series of commands.\"\"\"\n   56  \n   57      def __init__(self, layers, start, debug):\n   ..\n   69  \n   70          if self.debug:\n   71:             print \">>>> BEGIN TRANSFORMATION\"\n   72  \n   73          # loop through all single-layer transformations to all layers\n   ..\n   77  \n   78              if self.debug:\n   79:                 print \"#### Transformation buckets before transforming layer %d:\" % i\n   80:                 self.print_buckets(a, b)\n   81  \n   82              left = transforms\n   ..\n  106                  if self.debug:\n  107                      if cmd in ('halign', 'valign'):\n  108:                         print \"#### Set %s=%s\" % (t[1], t[0])\n  109                      else:\n  110:                         print \"#### Buckets after command %s%s:\" % t\n  111:                         self.print_buckets(a, b)\n  112  \n  113                  # we'll return the result in b\n  ...\n  148  \n  149          if self.debug:\n  150:             print \"<<<< END TRANSFORMATION\"\n  151  \n  152  \n  153:     def print_buckets(self, a, b):\n  154:         \"\"\"Print bucket contents A and B.\"\"\"\n  155:         print '---------------- BUCKET A ----------------'\n  156:         print FileLayer.str_rows(a)\n  157:         print '---------------- BUCKET B ----------------'\n  158:         print FileLayer.str_rows(b)\n  159:         print '------------------------------------------'\n  160  \n  161  \n\nC:\\code\\qf\\trunk\\qfconvert\\xls.py:\n    1: \"\"\"Read and parse .xls blueprints.\"\"\"\n    2  \n    3  import xlrd\n\nC:\\code\\qf\\trunk\\qfconvert\\xlsx.py:\n    1: \"\"\"Reading and parsing .xlsx format blueprints.\"\"\"\n    2  \n    3  import re\n\nC:\\code\\qf\\trunk\\quickfort.sublime-project:\n    1  <!-- Documentation is available at http://www.sublimetext.com/docs/projects -->\n    2  <project>\n    3:     <mount dir=\".\" exclude=\"*.png,*.jpg,*.exe,*.dll,*.obj,*.pyc,*.pyo,*.csv,*.zip,debug.txt\" direxclude=\"blueprints,.svn,.git,.hg,CVS,bin,nbproject,release,work\" />\n    4      <options>\n    5          <![CDATA[buildFile Packages/Python/Python.sublime-build]]>\n\nC:\\code\\qf\\trunk\\quickfort\\lib\\blueprint.ahk:\n    1: ;; Functions related to blueprints and processing them.\n    2  \n    3  \n    4  ;; ---------------------------------------------------------------------------\n    5: ;; do blueprint conversion via qfconvert\n    6: ConvertBlueprint(filename, outfile, sheetid, mode, title, startpos, transformation, visualize)\n    7  {\n    8    Tip(\"Thinking...\")\n    .\n   42  \n   43  ;; ---------------------------------------------------------------------------\n   44: ;; get info about blueprint via qfconvert\n   45: GetBlueprintInfo(filename)\n   46  {\n   47    global\n   ..\n   50    local result\n   51  \n   52:   Tip(\"Reading blueprint...\")\n   53  \n   54    params = --info\n   ..\n   70        if (StrLen(info) > 3)\n   71        {\n   72:         needle := \"Sheet id (\\d+)\\RBlueprint name: (.+)\\RBuild type: (.+)\\RComment: (.*)\\RStart position: (.+)\\RStart comment: (.*)\\RFirst layer width: (.+)\\RFirst layer height: (.+)\\RLayer count: (.+)\\RCommand use counts: (.*)\\RBlueprint preview:\\R((.+\\R)+)#\"\n   73          if (!RegExMatch(info, needle, matches))\n   74          {\n   75:           MsgBox, Error reading blueprint information from qfconvert.py output file %outfile%\n   76            return False\n   77          }\n   ..\n   85          LayerCount%cnt% := matches9\n   86          CommandUseCounts%cnt% := matches10\n   87:         BlueprintPreview%cnt% := matches11\n   88          cnt += 1\n   89        }\n\nC:\\code\\qf\\trunk\\quickfort\\lib\\compile.ahk:\n   26    FileCopy, releases\\*.*, ..\\release\n   27  \n   28:   ;RunWait, zip -9 -r releases\\Quickfort.zip aliases.txt Blueprints options.txt Quickfort.ahk Quickfort.exe readme.txt\n   29    ;Sleep 1000\n   30  \n\nC:\\code\\qf\\trunk\\quickfort\\lib\\convert.ahk:\n    1: ;; High level functions used by the hotkeys to read and play blueprints.\n    2  \n    3  \n    4  ;; ---------------------------------------------------------------------------\n    5: ;; convert blueprint to specification, move output macro file to DF macros dir\n    6  ;; and execute the macro in the DF window\n    7  ConvertAndPlayMacro()\n    .\n   19    ; Clock how long it takes\n   20    starttime := A_TickCount\n   21:   if (ConvertBlueprint(SelectedFile, outfile, SelectedSheetIndex, \"macro\", title, StartPos, RepeatPattern, false))\n   22    {\n   23      ; Move to DF dir\n   ..\n   41  \n   42  ;; ---------------------------------------------------------------------------\n   43: ;; convert blueprint to specification and output keystrokes to game window\n   44: ;; if visualizing is true we just outline the blueprint perimeter\n   45  ConvertAndSendKeys(visualizing)\n   46  {\n   ..\n   52    ActivateGameWin()\n   53  \n   54:   if (ConvertBlueprint(SelectedFile, outfile, SelectedSheetIndex, \"key\", \"visualize\", StartPos, RepeatPattern, visualizing))\n   55    {\n   56      ; Read file contents\n\nC:\\code\\qf\\trunk\\quickfort\\lib\\filepicker.ahk:\n   12    {\n   13      if (A_IsCompiled)\n   14:         SelectedFolder := A_ScriptDir \"\\blueprints\"\n   15      else\n   16:         SelectedFolder := A_ScriptDir \"\\..\\blueprints\"\n   17    }\n   18  \n   ..\n   20  \n   21    ; show file selection box\n   22:   FileSelectFile, filename, , %SelectedFolder%, Select a Quickfort-compatible blueprint file, Blueprints (*.xls`; *.xlsx`; *.csv)\n   23    ActivateGameWin()\n   24  \n\nC:\\code\\qf\\trunk\\quickfort\\lib\\hotkeys.ahk:\n  141      )\n  142  \n  143:     InputBox, pattern, Transform blueprint, %msg%, , 440, 260, , , , , %LastRepeatPattern%\n  144      ActivateGameWin()\n  145      \n  ...\n  168  \n  169  Examples:\n  170:   4e -- make a row of the blueprint repeated 4 times going east\n  171:   3e 3s -- 3x3 repeating pattern of blueprint\n  172:   5e 5s 5d -- 5x5x5 cube of blueprint (multi z level)\n  173:   fliph -- flip the blueprint horizontally\n  174:   rotcw -- rotate the blueprint clockwise 90 degrees\n  175:   fliph 2e flipv 2s -- 2x2 symmetrical pattern of blueprint\n  176    rotcw 2e flipv fliph 2s -- 2x2 rotated around a center point\n  177:   rotcw valign=t 2e -- after rotating, blueprints are top-aligned and repeated 2e\n  178:   rotcw ! 2e -- rotate original blueprint, then repeat that 2x east\n  179        )\n  180:       InputBox, pattern, Transform blueprint, %msg%, , 440, 400, , , , , %LastRepeatPattern%\n  181        ActivateGameWin()\n  182      }\n  ...\n  220        SaveAppState()\n  221  \n  222:       if (GetBlueprintInfo(SelectedFile))\n  223        {\n  224          SelectedSheetIndex =\n  ...\n  255  \n  256  ;; ---------------------------------------------------------------------------\n  257: ;; Visualize blueprint's footprint (Alt+V)\n  258  $!V::\n  259  {\n\nC:\\code\\qf\\trunk\\quickfort\\lib\\mousetip.ahk:\n   80    if (mode == \"pickfile\")\n   81    {\n   82:     header := \"Quickfort \" Version \"`n`nPick a blueprint file with Alt+F.`nAlt+T for command line.\"\n   83    }\n   84    else {\n   ..\n  140              . \"Position cursor with KEYBOARD.`n\"\n  141              . \"`n\"\n  142:             . \"Alt+V shows footprint.`n\"\n  143              . \"Alt+D starts playback.`n\"\n  144              . \"`n\"\n  145              . \"Alt+Q/W/A/S sets starting corner.`n\"\n  146              . (StartPos ? \"Alt+Z resets starting corner.`n\" : \"\")\n  147:             . \"Alt+R transforms blueprint.`n\"\n  148              . \"`n\"\n  149              . \"Alt+F/E picks a new file/sheet.`n\"\n\nC:\\code\\qf\\trunk\\quickfort\\lib\\sheetgui.ahk:\n    1: ;; Shows and handles events for the sheet selection and blueprint info GUI\n    2  ;; which is shown after file selection.\n    3  \n    .\n   14    if (listViewEnabled) {\n   15      ;Gui, Add, Text, r20 w220 h20, Worksheets\n   16:     Gui, Add, ListView, r20 w160 h460 gSheetListView vSelectedSheetIndex AltSubmit -Hdr -Multi, Blueprint\n   17    }\n   18  \n   ..\n   26    Gui, Font, S9, Verdana\n   27    Gui, Add, Button, y+5 w75 gButtonCopyText, &Copy text\n   28:   Gui, Add, Button, x+5 w100 gButtonEditBlueprint, &Edit blueprint\n   29    Gui, Add, Button, x+265 w75 Default, OK\n   30    Gui, Add, Button, x+5 w75, Cancel\n   ..\n  162  \n  163  ;; ---------------------------------------------------------------------------\n  164: ;; Handle the Edit Blueprint button\n  165: ButtonEditBlueprint:\n  166  {\n  167    editing := SelectedFile\n  ...\n  199    newtext := newtext \"`n`nCommand usage frequencies:`n\" CommandUseCounts%index%\n  200    newtext := newtext \"`n`nDimensions: \" Width%index% \"w x \" Height%index% \"h\"\n  201:   newtext := newtext \"`n`n\" BlueprintPreview%index%\n  202    GuiControl,, SheetName, %newtitle%\n  203    GuiControl,, SheetInfo, %newtext%\n\nC:\\code\\qf\\trunk\\quickfort\\Quickfort.ahk:\n   15  ; Includes are best put at the end of AHK scripts because they are added and executed inline\n   16  ; wherever the #include appears\n   17: #include lib/blueprint.ahk\n   18  #include lib/compile.ahk\n   19  #include lib/convert.ahk\n\nC:\\code\\qf\\trunk\\quickfort\\readme.txt:\n   18  ***                or chmod +x qfconvert.py and run it like a shell script.\n   19  *** Linux example:\n   20: ***   > python ./qfconvert.py myblueprint.xls <DF folder>/data/init/macros/myblueprint.mak\n   21  ***   ... then play your macro in DF with Ctrl+L, <select macro>, Ctrl+P.\n   22  ***\n   ..\n   28  \n   29  Quickfort is an AutoHotkey-based utility for Dwarf Fortress that helps you build\n   30: fortresses from \"blueprint\" .CSV files (comma separated values). These files are\n   31  easily created and edited in an app like Excel. Most building-oriented DF\n   32  commands are supported through the use of multiple .CSV files to describe the\n   ..\n   37  <http://www.bay12games.com/forum/index.php?topic=1428.0>.\n   38  \n   39: User contributed blueprints can be found at <http://drop.io/quickfort>.\n   40  \n   41  \n   ..\n   43  --------\n   44  \n   45: * Design complete blueprints in .CSV files to handle 4 main phases of construction\n   46: * Ability to leave author's comments in blueprints (shown to blueprint user)\n   47: * Multi-Z-level blueprints\n   48  * Repeating construction mode in any or all 3 dimensions\n   49  * Simple command line entry\n   ..\n   51  * Keystroke (construction speed) optimizations\n   52  * Minimalist (and optional) GUI\n   53: * Assortment of sample blueprints included\n   54  \n   55  \n   ..\n   65  \n   66  Use Alt+D to select a CSV file to execute. There are some samples in the\n   67: Blueprints folder. Quickfort will give instructions in the mouse tooltip for\n   68  positioning the in-game cursor. Once positioned, use Alt+D again to begin.\n   69  Quickfort will send the keystrokes necessary to DF to dig, build, place, or\n   70: query according to the chosen blueprint. Resist the urge to touch the mouse or\n   71  keyboard at this time.\n   72  \n   73: Alt+Q/W/A/S can be used to change the starting corner for the blueprint (that\n   74: is, which corner of the blueprint you'll put the starting cursor at). The\n   75  current starting corner setting will be shown in the QF tooltip. These hotkeys\n   76: have no effect if the blueprint specifies a starting cursor position; see\n   77  the \"Specifying a starting position\" section below for more details.\n   78  \n   79: Alt+R can be used to repeat a blueprint any number of times to the north, south,\n   80  east, west, up, and down. This can be useful for digging multilevel\n   81  staircases/shafts, repeating room complexes, etc. You can even specify multiple\n   ..\n   87  Hold down Alt+C to cancel Quickfort's build routine partway through.\n   88  \n   89: After a build completes, Alt+E can be used to redo the same blueprint again, or\n   90: use Alt+D again to select a new blueprint. Alt+H can be used to hide QF's\n   91  mouse tooltip when not building; all hotkeys will continue to work.\n   92  \n   ..\n  135  Note the # symbols at the right end of each row and below the last row. These\n  136  are OPTIONAL, but can be helpful. If you omit them QF *should* render your\n  137: blueprint properly. If you run into problems (e.g. Excel saving 'blank' cells\n  138  and rows unnecessarily), use # symbols as shown above to clearly delineate the\n  139: area. These tell QF where the edges of your blueprint are.\n  140  \n  141  Once the dwarves have that dug out, let's build a walled in bedroom within our\n  ...\n  165  row 3. All the other cells are empty. QF considers both ` and ~ characters\n  166  within cells to be empty cells; this can help with multilayer or fortresswide\n  167: blueprint layouts.\n  168  \n  169  With f(2x1), we've asked QF to place a Food stockpile 2 units wide by 1 high\n  ...\n  189  menu.\n  190  \n  191: The Blueprints/General/bedroom-*.csv files provide a good simple example of a\n  192: 4-layer QF blueprint. Check out aliases.txt for some helpful starting aliases.\n  193: Blueprints/TheQuickFortress/ provides a good detailed set of examples covering\n  194  some more complex designs.\n  195  \n  ...\n  199  \n  200  You can optionally specify a cursor starting position for a particular\n  201: blueprint, simplifying the task of blueprint alignment. This can be helpful\n  202: for blueprints that are based on a central staircase, for example.\n  203  \n  204  To specify a cursor starting position, use the following modified format\n  ...\n  214  A couple examples:\n  215  \n  216:     #dig start(3; 3; Center tile of a 5-tile square) Regular blueprint comment\n  217      #build start(10;15)\n  218  \n  ...\n  221  paramter.\n  222  \n  223: See Blueprints/Tests/starting-position.csv for a simple example.\n  224: The Blueprints/TheQuickFortress/*.csv examples all utilize start().\n  225  \n  226  \n  227: Multilevel blueprints\n  228  ---------------------\n  229  \n  230: Multilevel blueprints are accommodated by separating Z-levels of the blueprint\n  231  with #> or #< at the end of each floor:\n  232  \n  ...\n  240  \n  241  \n  242: Layering blueprints\n  243  -------------------\n  244  \n  245  A complete QF specification for a floor of your fortress may contain 4 or more\n  246: separate CSV blueprints, one for each \"phase\" of construction (dig/designate,\n  247  build, place stockpiles, building adjustments). These phases suggest a\n  248: convenient naming scheme for blueprints, as seen in the Blueprints/General folder:\n  249  \n  250      bedroom-dig.csv\n  ...\n  254  \n  255  The naming scheme is up to you, of course. A similar approach is used in the\n  256: Blueprints/TheQuickFortress folder.\n  257  \n  258  After digging out an area, it's often helpful to dump all leftover stone in the\n  ...\n  264  ----------\n  265  \n  266: A blueprint can be repeated in 1, 2 or 3 dimensions using the Alt+R\n  267: \"Repeat\" command. Quickfort will designate the blueprint any number of times\n  268  in the directions you specify.\n  269  \n  ...\n  275  \n  276  Quickfort's command prompt can be accessed with Alt+T. Here you can enter a single\n  277: line of a blueprint to be played back (including aliases). Additionally, you can use\n  278  Alt+R to repeat a command in multiple directions.\n  279  \n  ...\n  299  \n  300  * Always check QF's mousetip instructions before hitting Alt+D to begin a\n  301:   blueprint. Being in the wrong menu is a common cause of wacky behavior.\n  302  \n  303  * If you have trouble just getting one of the sample files to work, take a look\n  ...\n  331  * Workshops, depots, stores, furnaces, and others place from their CENTER tile,\n  332    rather than their top left tile as specified in the CSV. Make sure to account\n  333:   for these offsets in your blueprint. When in doubt, try positioning the cursor\n  334    in game, then switch to the object you want to place and observe which of its\n  335    tiles it anchors from.\n  ...\n  389  * Support multiline entries in QF command line\n  390  * Test/support every placeable DF object/command\n  391: * Support top/repeatable middle/bottom multilevel blueprints\n  392  * Support manual and automatic build material selection, similar to DFWall\n  393  * Rowwise large construction analysis (d,d\\nd,d\\n -> d(2x2))\n  394  * Consider support for all build phases in one CSV (d;b;;r+)\n  395: * Consider CSV 'stacks' - meta-blueprints acting as indexes to other CSVs\n  396: * Consider GUI for blueprint creation (incorporation of all mode-layers in an\n  397    Excel-like GUI)\n  398  \n  ...\n  405  1.11 (2010 April 15)\n  406  \n  407: * Addition of a \"materials list\" after loading a blueprint\n  408    which can be very useful for the build phase\n  409  * Cancelling during a build now just shows a brief notice in the mousetip\n  ...\n  422  * Fixed placement of farm plots\n  423  * Cleanup of options.txt\n  424: * Cleaned up and renamed .\\Blueprints folder (was .\\Examples)\n  425  * Modified mouse-tip positioning to avoid overlapping the pointer vertically\n  426  \n  ...\n  463  \n  464  * Added diagonal cursor movement optimization\n  465: * Fixed start() data from one blueprint carrying over to a subsequent blueprint w/o start()\n  466  \n  467  \n\nC:\\code\\qf\\trunk\\quickfort_stx.sublime-project:\n   41  	[\n   42  		{\n   43: 			\"file\": \"/C/code/qf/trunk/qfconvert/blueprint.py\",\n   44  			\"settings\":\n   45  			{\n   ..\n  273  		\"/C/code/qf/trunk/makerelease.bat\",\n  274  		\"/C/code/qf/trunk/qfconvert/keystroker.py\",\n  275: 		\"/C/code/qf/trunk/Blueprints/Tests/multikey.csv\",\n  276  		\"/C/code/qf/release/state.ini\",\n  277  		\"/C/code/qf/trunk/quickfort/aliases.txt\",\n  ...\n  279  		\"/C/code/qf/trunk/quickfort/lib/sheetgui.ahk\",\n  280  		\"/C/code/qf/trunk/quickfort/lib/state.ahk\",\n  281: 		\"/C/code/qf/trunk/quickfort/lib/blueprint.ahk\",\n  282  		\"/C/code/qf/trunk/quickfort/lib/qfconvert.ahk\",\n  283  		\"/C/code/qf/trunk/quickfort/lib/convert.ahk\",\n  ...\n  291  		\"/C/games/dwarffortress3121/data/init/init.txt\",\n  292  		\"/C/code/qf/trunk/qfconvert/geometry.py\",\n  293: 		\"/C/code/qf/trunk/qfconvert/blueprint.py\",\n  294  		\"/C/code/qf/trunk/qfconvert/aliases.py\",\n  295  		\"/C/code/qf/trunk/quickfort/QuickfortScriptRunner.ahk\",\n  ...\n  400  			\"enumerate\",\n  401  			\"self.layers[0].grid.width\",\n  402: 			\"blueprint preview\",\n  403  			\"Command usage fre\",\n  404  			\"Command use counts\",\n  405: 			\"blueprint preview\",\n  406  			\"pattern\",\n  407  			\"__init__\",\n  ...\n  528  				{\n  529  					\"buffer\": 0,\n  530: 					\"file\": \"/C/code/qf/trunk/qfconvert/blueprint.py\",\n  531  					\"settings\":\n  532  					{\n  ...\n 1302  			[\n 1303  				\"blu\",\n 1304: 				\"quickfort/lib/blueprint.ahk\"\n 1305  			],\n 1306  			[\n\nC:\\code\\qf\\trunk\\source_code_readme.txt:\n    7      Python based implementation of Quickfort's core building\n    8      algorithm. Attempts to minimize the number of keystrokes\n    9:     required to plot blueprints.\n   10  \n   11: \\blueprints\n   12:     Various blueprints packaged with Quickfort releases.\n\n232 matches across 31 files\n\n\nSearching 17 files for \"print\" (regex)\n\nC:\\code\\qf\\trunk\\qfconvert\\areaplotter.py:\n   34          \"\"\"\n   35          if self.debug:\n   36:             print \">>>> BEGIN AREA EXPANSION\"\n   37  \n   38          label = self.label\n   ..\n   62  \n   63          if self.debug:\n   64:             print Grid.str_area_labels(self.grid) + '\\n'\n   65:             print \"<<<< END AREA EXPANSION\"\n   66          self.label = label\n   67          return\n   ..\n   74  \n   75          if self.debug:\n   76:             print \">>>> BEGIN AREA DISCOVERY\"\n   77  \n   78          testarea = Area(\n   ..\n   83          while True:\n   84              if self.debug:\n   85:                 print Grid.str_area_labels(self.grid) + '\\n'\n   86:                 print '#### Marking largest plottable areas starting ' + \\\n   87                      'with label %s' % self.label\n   88  \n   ..\n   91              if not self.grid.is_area_plottable(testarea, True):\n   92                  if self.debug:\n   93:                     print Grid.str_area_labels(self.grid) + '\\n'\n   94:                     print \"#### Grid is completely plotted\"\n   95:                     print \"<<<< END AREA DISCOVERY\"\n   96                  return\n   97  \n\nC:\\code\\qf\\trunk\\qfconvert\\blueprint.py:\n    1: \"\"\"Blueprint class and associated processing functions.\"\"\"\n    2  \n    3  import re\n    .\n   15  from aliases import load_aliases, apply_aliases\n   16  \n   17: def get_blueprint_info(path):\n   18:     \"\"\"Returns information about the blueprint at path.\"\"\"\n   19      sheets = get_sheets(path)\n   20  \n   ..\n   25                  parse_file(path, sheet[1])\n   26              layers = FileLayers_to_GridLayers(layers)\n   27:             bp = Blueprint(sheet[0], layers, details)\n   28              s += '>>>> Sheet id %d\\n' % sheet[1]\n   29              s += bp.get_info() + '\\n'\n   ..\n   34          return s\n   35      else:\n   36:         raise Exception, \"No valid blueprints found in '%s'.\" % path\n   37  \n   38  \n   39: def process_blueprint_file(path, options):\n   40      \"\"\"\n   41:     Main routine for reading a blueprint, transforming it, and rendering\n   42:     keystrokes/macros required to plot or visualize the blueprint specified.\n   43      \"\"\"\n   44  \n   45      if options.debugfile:\n   46:         print \">>>> BEGIN INPUT FILE PARSING\"\n   47  \n   48      # parse sheetid\n   ..\n   54          sheetid = get_sheets(path)\n   55  \n   56:     # read in the blueprint\n   57      layers, details = parse_file(path, sheetid)\n   58  \n   59      if options.debugfile:\n   60:         print '#### Parsed %s' % path\n   61:         print FileLayer.str_layers(layers)\n   62  \n   63:     # apply aliases.txt to blueprint contents\n   64      aliases = load_aliases('config/aliases.txt')\n   65      layers = apply_aliases(layers, aliases)\n   66  \n   67:     # transform the blueprint\n   68      if options.transform:\n   69          if options.debugtransform:\n   70:             print \"#### Transforming with: %s\" % options.transform\n   71  \n   72          transforms = parse_transform_str(options.transform)\n   ..\n   77  \n   78          if options.debugfile:\n   79:             print \"#### Results of transform:\"\n   80:             print FileLayer.str_layers(layers)\n   81  \n   82      layers = FileLayers_to_GridLayers(layers)\n   ..\n   88              layers[0].grid.height)\n   89  \n   90:     # convert layers and other data to Blueprint\n   91:     bp = Blueprint('', layers, details)\n   92  \n   93      if options.debugfile:\n   94:         print \"<<<< END INPUT FILE PARSING\"\n   95  \n   96:     # get keys/macrocode to outline or plot the blueprint\n   97      if options.visualize:\n   98          keys = bp.trace_outline(options)\n   ..\n  103  \n  104      if options.debugsummary:\n  105:         print \">>>> BEGIN SUMMARY\"\n  106:         print \"---- Layers:\"\n  107          for i, layer in enumerate(bp.layers):\n  108:             print \"=\" * 20 + ' Layer %d ' % i + '=' * 20\n  109:             print \"Entering cursor position: %s\" % layer.start\n  110:             print \"\\n#### Commands:\"\n  111:             print str(layer.grid) + '\\n'\n  112:             print \"#### Area labels:\"\n  113:             print Grid.str_area_labels(layer.grid) + '\\n'\n  114:             print \"Route order: %s\" % ''.join(\n  115                  [layer.grid.get_cell(plot).label\n  116                      for plot in layer.plots]\n  117                  )\n  118:             print \"Layer onexit keys: %s\\n\" % layer.onexit\n  119:         print \"---- Overall:\"\n  120:         print \"Total key cost: %d\" % len(keys)\n  121:         print \"<<<< END SUMMARY\"\n  122  \n  123      return output\n  ...\n  141  \n  142  \n  143: class Blueprint:\n  144      \"\"\"\n  145:     Represents a single blueprint (csv file or sheet in xls/x file).\n  146      Provides high level methods for plotting, outlining, and retrieving\n  147:     information about the blueprint.\n  148      \"\"\"\n  149  \n  ...\n  157  \n  158      def plot(self, options):\n  159:         \"\"\"Plots a route through the blueprint.\"\"\"\n  160          buildconfig = BuildConfig(self.build_type)\n  161          keys = []\n  ...\n  220  \n  221      def get_info(self):\n  222:         \"\"\"Retrieve various bits of info about the blueprint.\"\"\"\n  223          cells = flatten(layer.grid.rows for layer in self.layers)\n  224          commands = [c.command for c in cells]\n  ...\n  227              cmdset.remove('')\n  228  \n  229:         # count the number of occurrences of each command in the blueprint\n  230          counts = [(c, commands.count(c)) for c in cmdset]\n  231          counts.sort(key=lambda x: x[1], reverse=True)\n  232          \n  233:         # make a row of repeating numbers to annotate the blueprint with\n  234          width = self.layers[0].grid.width\n  235          numbering_row = '  ' + ('1234567890' * (width // 10))[0:width]\n  236  \n  237:         # build the blueprint preview\n  238          preview = numbering_row\n  239          return textwrap.dedent(\"\"\"\n  240:             Blueprint name: %s\n  241              Build type: %s\n  242              Comment: %s\n  ...\n  258                  ', '.join(\"%s:%d\" % c for c in counts)\n  259                  ) + \\\n  260:             \"\\nBlueprint preview:\\n\" + \\\n  261                  '\\n'.join(\n  262                      Grid.str_commands(layer.grid.rows, annotate=True) + \\\n\nC:\\code\\qf\\trunk\\qfconvert\\filereader.py:\n    1: \"\"\"Blueprint file reading/parsing operations.\"\"\"\n    2  \n    3  import json\n    .\n   29  class FileLayer:\n   30      \"\"\"\n   31:     Represents the rows/cells of a single layer within a blueprint/sheet.\n   32      Includes an onexit member which specifies what keycodes should be used\n   33      to transition from one FileLayer to the next (in a list of FileLayers).\n   ..\n   63                  endat = cells.index('#') # find first # (row ender) in any\n   64                  if endat == 0:\n   65:                     raise Exception, \"Blueprint has '#' in unexpected cell.\"\n   66                  else:\n   67                      # trim off stuff from the found # to the right\n   ..\n   78  \n   79          if maxwidth == 0:\n   80:             raise Exception, \"Blueprint appears to be empty or zero-width.\"\n   81  \n   82          # Conform all rows to the same width\n   ..\n  178  \n  179      # if there's a line that starts with #, treat it as the last line of\n  180:     # the blueprint and trim off everything from there to the end of lines\n  181      for i, line in enumerate(lines):\n  182          if line and line[0] == '#':\n  ...\n  195      \"\"\"\n  196      Parses out build type, start pos/comment, and general comment\n  197:     from top line of blueprint. Returns an object with keyword\n  198      properties .build_type, .start, .start_comment, .comment\n  199      \"\"\"\n\nC:\\code\\qf\\trunk\\qfconvert\\grid.py:\n    1: \"\"\"Main storage classes for blueprint data used throughout qfconvert.\"\"\"\n    2  \n    3  from copy import deepcopy\n    .\n   37      \"\"\"\n   38      Represents a cartesian grid of cells corresponding to positions in\n   39:     a Dwarf Fortress map or QF blueprint.\n   40      \"\"\"\n   41  \n   ..\n  314          \"\"\"\n  315          rowstrings = []\n  316:         print annotate\n  317          if annotate:\n  318              # draw numbering ruler along the top\n\nC:\\code\\qf\\trunk\\qfconvert\\keystroker.py:\n  197                      # test if jumping an extra 10-unit step\n  198                      # would put us outside of the bounds of\n  199:                     # the blueprint (want to prevent)\n  200                      test = start + (jumpmove * (jumps + 1))\n  201  \n\nC:\\code\\qf\\trunk\\qfconvert\\qfconvert.py:\n    7  import cProfile\n    8  \n    9: import blueprint\n   10  \n   11  version = '2.00pre4'\n   ..\n   35      parser.add_option(\"-v\", \"--visualize\",\n   36                        action=\"store_true\", dest=\"visualize\", default=False,\n   37:                       help=\"just moves cursor around blueprint's perimeter\")\n   38      parser.add_option(\"-C\", \"--show-csv-parse\",\n   39                        action=\"store_true\", dest=\"debugfile\", default=False,\n   40:                       help=\"show blueprint parsing steps on stdout\")\n   41      parser.add_option(\"-X\", \"--show-transforms\",\n   42                        action=\"store_true\", dest=\"debugtransform\", default=False,\n   ..\n   57  \n   58      if len(args) < 1:\n   59:         parser.print_help()\n   60          return None, None\n   61  \n   ..\n   83      try:\n   84          if options.info:\n   85:             output = blueprint.get_blueprint_info(infile)\n   86          else:\n   87:             output = blueprint.process_blueprint_file(infile, options)\n   88  \n   89          if outfile:\n   ..\n   91                  outf.write(output)\n   92          else:\n   93:             print output\n   94      except Exception as ex:\n   95:         traceback.print_exc()\n   96          if outfile:\n   97              with open(outfile, 'w') as outf:\n   ..\n  101  \n  102  def main():\n  103:     \"\"\"Parse options file, parse and convert blueprint, and output result.\"\"\"\n  104      global options, args\n  105  \n  ...\n  112                  run()\n  113      except Exception as ex:\n  114:         print 'Error: ' + str(ex)\n  115  \n  116  \n\nC:\\code\\qf\\trunk\\qfconvert\\router.py:\n   17  \n   18      if debug:\n   19:         print Grid.str_area_labels(grid) + '\\n'\n   20:         print \">>>> BEGIN ROUTE PLANNING\"\n   21  \n   22      while (True):\n   ..\n   36  \n   37              if debug:\n   38:                 print \"#### Plotting area starting at %s, area %s\" % (\n   39                      nearest_pos, area)\n   40:                 print Grid.str_plottable(grid) + '\\n'\n   41  \n   42              # move cursor to the ending corner of the plotted area\n   ..\n   44  \n   45      if debug:\n   46:         print Grid.str_plottable(grid) + '\\n'\n   47:         print \"#### Plotted all areas\"\n   48:         print Grid.str_area_labels(grid)\n   49:         print \"Route replay sequence: %s\" % \\\n   50              ''.join([grid.get_cell(plot).label for plot in plots])\n   51:         print \"Cursor position now: %s\" % cursor\n   52:         print \"<<<< END ROUTE PLANNING\"\n   53  \n   54      return grid, plots, cursor\n\nC:\\code\\qf\\trunk\\qfconvert\\transformer.py:\n    1  \"\"\"\n    2: Transforms/repeats blueprint layers based on a sequence of transformation\n    3  commands.\n    4  \"\"\"\n    .\n   53  \n   54  class Transformer:\n   55:     \"\"\"Handles transformation of a blueprint based on a series of commands.\"\"\"\n   56  \n   57      def __init__(self, layers, start, debug):\n   ..\n   69  \n   70          if self.debug:\n   71:             print \">>>> BEGIN TRANSFORMATION\"\n   72  \n   73          # loop through all single-layer transformations to all layers\n   ..\n   77  \n   78              if self.debug:\n   79:                 print \"#### Transformation buckets before transforming layer %d:\" % i\n   80:                 self.print_buckets(a, b)\n   81  \n   82              left = transforms\n   ..\n  106                  if self.debug:\n  107                      if cmd in ('halign', 'valign'):\n  108:                         print \"#### Set %s=%s\" % (t[1], t[0])\n  109                      else:\n  110:                         print \"#### Buckets after command %s%s:\" % t\n  111:                         self.print_buckets(a, b)\n  112  \n  113                  # we'll return the result in b\n  ...\n  148  \n  149          if self.debug:\n  150:             print \"<<<< END TRANSFORMATION\"\n  151  \n  152  \n  153:     def print_buckets(self, a, b):\n  154:         \"\"\"Print bucket contents A and B.\"\"\"\n  155:         print '---------------- BUCKET A ----------------'\n  156:         print FileLayer.str_rows(a)\n  157:         print '---------------- BUCKET B ----------------'\n  158:         print FileLayer.str_rows(b)\n  159:         print '------------------------------------------'\n  160  \n  161  \n\nC:\\code\\qf\\trunk\\qfconvert\\xls.py:\n    1: \"\"\"Read and parse .xls blueprints.\"\"\"\n    2  \n    3  import xlrd\n\nC:\\code\\qf\\trunk\\qfconvert\\xlsx.py:\n    1: \"\"\"Reading and parsing .xlsx format blueprints.\"\"\"\n    2  \n    3  import re\n\n103 matches across 10 files\n",
			"settings":
			{
				"buffer_size": 51252,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/keystroker.py",
			"settings":
			{
				"buffer_size": 14358,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/Data/Packages/User/Base File.sublime-settings",
			"settings":
			{
				"buffer_size": 369,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/Data/Packages/User/Global.sublime-settings",
			"settings":
			{
				"buffer_size": 422,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/config/interface.txt",
			"settings":
			{
				"buffer_size": 60583,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/aliases.py",
			"settings":
			{
				"buffer_size": 1448,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/Data/Packages/Python/Python.sublime-settings",
			"settings":
			{
				"buffer_size": 44,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/Data/Packages/Default/Base File.sublime-settings",
			"settings":
			{
				"buffer_size": 4755,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/code/qf/trunk/quickfort_stx.sublime-project",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/copyrelease.bat",
			"settings":
			{
				"buffer_size": 831,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/geometry.py",
			"settings":
			{
				"buffer_size": 6477,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/select.pyd",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/My Dropbox/SublimeText2/_ssl.pyd",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/test.csv",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/grid.py",
			"settings":
			{
				"buffer_size": 11482,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/areaplotter.py",
			"settings":
			{
				"buffer_size": 9465,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/filereader.py",
			"settings":
			{
				"buffer_size": 7726,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/transformer.py",
			"settings":
			{
				"buffer_size": 9920,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/config/buildconfig.json",
			"settings":
			{
				"buffer_size": 5193,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/qfconvert/config/aliases.txt",
			"settings":
			{
				"buffer_size": 3586,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/quickfort/lib/df.ahk",
			"settings":
			{
				"buffer_size": 3799,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/My Dropbox/code/ahk/foozykeys/foozykeys.ahk",
			"settings":
			{
				"buffer_size": 42582,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/code/qf/trunk/makezip.bat",
			"settings":
			{
				"buffer_size": 113,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"file_history":
	[
		"/C/My Dropbox/SublimeText2/unicodedata.pyd",
		"/C/code/qf/trunk/qfconvert/csvtest.csv",
		"/C/code/qf/trunk/qfconvert/qfcmd.btm",
		"/C/Users/joelt/AppData/Roaming/Sublime Text 2/Packages/User/Fooz.py",
		"/?",
		"/T/Vso Convertxtodvd v4.1.12.352 Final + Serials/Slickinator.txt",
		"/C/code/qf/trunk/qfconvert/transformer.py",
		"/C/code/qf/trunk/qfconvert/router.py",
		"/C/code/qf/trunk/qfconvert/filereader.py",
		"/C/code/qf/trunk/qfconvert/grids.py",
		"/C/code/qf/trunk/qfconvert/areaplotter.py",
		"/C/code/qf/trunk/qfconvert/config/keys.json",
		"/C/code/qf/trunk/qfconvert/buildconfig.json.source",
		"/C/code/qf/trunk/qfconvert/config/buildconfig.json",
		"/C/code/qf/trunk/qfconvert/config/aliases.txt",
		"/C/code/qf/trunk/quickfort/config/options.txt",
		"/C/code/qf/trunk/quickfort/readme.txt",
		"/C/code/qf/trunk/qfconvert/make.bat",
		"/C/code/qf/trunk/quickfort/make.bat",
		"/C/code/qf/trunk/quickfort/lib/init.ahk",
		"/C/code/qf/trunk/quickfort/lib/hotkeys.ahk",
		"/C/code/qf/trunk/qfconvert/qfconvert.py",
		"/C/code/qf/trunk/copyrelease.bat",
		"/C/code/qf/trunk/makezip.bat",
		"/C/code/qf/trunk/makerelease.bat",
		"/C/code/qf/trunk/qfconvert/keystroker.py",
		"/C/code/qf/trunk/Blueprints/Tests/multikey.csv",
		"/C/code/qf/release/state.ini",
		"/C/code/qf/trunk/quickfort/aliases.txt",
		"/C/code/qf/trunk/quickfort/lib/misc.ahk",
		"/C/code/qf/trunk/quickfort/lib/sheetgui.ahk",
		"/C/code/qf/trunk/quickfort/lib/state.ahk",
		"/C/code/qf/trunk/quickfort/lib/blueprint.ahk",
		"/C/code/qf/trunk/quickfort/lib/qfconvert.ahk",
		"/C/code/qf/trunk/quickfort/lib/convert.ahk",
		"/C/code/qf/trunk/quickfort/lib/mousetip.ahk",
		"/C/code/qf/trunk/qfconvert/buildconfig.json",
		"/C/z/pychecker/pychecker-0.8.19/setup.cfg",
		"/C/Users/joelt/AppData/Local/Temp/fz3temp-1/index.php",
		"/C/code/qf/trunk/qfconvert/buildconfig.py",
		"/C/code/qf/trunk/qfconvert/keys.json",
		"/C/code/qf/trunk/qfconvert/test.csv",
		"/C/games/dwarffortress3121/data/init/init.txt",
		"/C/code/qf/trunk/qfconvert/geometry.py",
		"/C/code/qf/trunk/qfconvert/blueprint.py",
		"/C/code/qf/trunk/qfconvert/aliases.py",
		"/C/code/qf/trunk/quickfort/QuickfortScriptRunner.ahk",
		"/C/my/notes/great programming language.txt",
		"/C/My Dropbox/SublimeText2/Data/Packages/User/Global.sublime-settings",
		"/C/My Dropbox/SublimeText2/Data/Packages/User/Base File.sublime-settings",
		"/C/My Dropbox/SublimeText2/Data/Packages/User/Default (Windows).sublime-keymap",
		"/C/code/qf/trunk/quickfort/Quickfort.ahk",
		"/C/z/wsapiclient/src/com/web/data/Patient.java",
		"/C/z/wsapiclient/src/com/web/data/EmergencyContact.java",
		"/C/z/wsapiclient/src/com/web/data/HomeAddress.java",
		"/C/z/wsapiclient/src/com/web/data/Address.java",
		"/C/z/wsapiclient/src/com/web/command/PatientCommand.java",
		"/C/z/wsapiclient/src/com/web/command/SecurityCommand.java",
		"/C/z/wsapiclient/src/com/web/command/ServiceInfoCommand.java",
		"/C/z/wsapiclient/src/com/web/command/UserCommand.java",
		"/C/z/wsapiclient/src/com/web/command/UserPatientCommand.java",
		"/C/z/wsapiclient/src/com/web/command/EventCommand.java",
		"/C/z/wsapiclient/bin/com/web/command/UserPatientCommand.class",
		"/C/z/wsapiclient/bin/com/web/command/UserPatientCommandTest.class",
		"/C/code/qf/trunk/qfconvert/deleteme.py",
		"/C/My Dropbox/code/ahk/foozykeys/foozykeys.ahk",
		"/C/code/qf/trunk/quickfort/@qf4210710002.csv",
		"/C/code/qf/trunk/quickfort/@qf4209144626.mak",
		"/C/code/qf/trunk/quickfort/@qf4209147012.csv",
		"/C/Users/joelt/AppData/Local/Temp/Rar$DR00.144/Quickfort.ahk",
		"/G/readme.txt",
		"/C/My Dropbox/SublimeText2/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/joelt/AppData/Roaming/Sublime Text X/Packages/User/Global.sublime-settings",
		"/C/Users/joelt/AppData/Roaming/Sublime Text X/Packages/Default/Global.sublime-settings",
		"/C/Users/joelt/AppData/Roaming/Sublime Text X/Packages/Default/Base File.sublime-settings",
		"/C/Users/joelt/AppData/Roaming/Sublime Text X/Packages/Default/Default (Windows).sublime-keymap",
		"/C/ppf.log"
	],
	"find_in_files":
	{
		"include_history":
		[
			"*.py",
			"*.*",
			"*.py",
			"*.ahk",
			"*.py",
			"*",
			"*.ahk",
			"*.*",
			"*.ahk",
			""
		],
		"location_history":
		[
			"C:\\code\\qf\\trunk\\",
			"C:\\code\\qf\\trunk\\qfconvert",
			"C:\\code\\qf\\trunk",
			"C:\\code\\qf\\trunk\\quickfort",
			"C:\\code\\qf\\trunk\\qfconvert",
			"C:\\code\\qf\\trunk\\quickfort",
			"C:\\code\\qf\\trunk\\qfconvert",
			"C:\\code\\qf\\trunk\\quickfort",
			"C:\\code\\qf\\trunk\\qfconvert"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"parse_sheet_details",
			"Bunch",
			" ",
			"xbutton1",
			"collaboration/",
			"^\\| (\\d{1,2})\\n\\|(.*)\\n\\|(.*)\\n\\|(.*)\\n\\|(.*)\\n\\|(.*)\\n\\|-\\n",
			"^\\| (\\d{1,2})\\n\\|(.*)\\n\\|(.*)\\n\\|(.*)\\n\\|(.*)\\n\\|-\\n",
			"^\\| (\\d{1,2})\\n\\|\\n\\|",
			"blockinput",
			"\"#\"",
			"grid after set",
			"route order",
			"router order",
			"trace_outline",
			"CommandCell",
			"geometry",
			"sqrt",
			"can be chain",
			"bottom",
			"x::",
			"!",
			"convert_line_endings",
			"!",
			"parse_interface",
			"SaveAppState",
			"Alt+K",
			"version",
			"sort",
			"lambda",
			"with open",
			"filepath",
			"=",
			",",
			"if err",
			"R::",
			"IfMsgBox",
			"t::",
			"frequencies",
			"offset",
			"preview:",
			"sheet id ",
			"sheet id:",
			"bottom",
			"enumerate",
			"self.layers[0].grid.width",
			"blueprint preview",
			"Command usage fre",
			"Command use counts",
			"blueprint preview",
			"pattern",
			"__init__",
			"outline(",
			"start",
			"filereader.",
			"filereader",
			"show events i",
			"\\n\\n",
			"xbutt",
			"mbutton::",
			"xbutton1::",
			"c:",
			"delete",
			"copy",
			"valign",
			"copy",
			"parse_interface_txt",
			"~",
			"(.+,)\\n",
			"BUILD_CONFIG",
			"keylist",
			"KEY_LIST",
			"keybinds",
			"KEY_LIST",
			"json",
			"KEY_LIST",
			"pre3",
			"`,",
			"`",
			"`,",
			"file/sheet",
			"saveappstate",
			"WriteCommandLineToFile",
			"SetStartPos",
			"aliases",
			"invalid tran",
			"str_rows",
			"'.'",
			"filedelete",
			"Rando",
			"SelectedFilename",
			"file not found",
			"scriptdir",
			"working",
			"UserInitKey",
			"starts at:",
			"lastCommand",
			"BUILD_TYPE_CFG",
			"write",
			"GetNewMacroName",
			"@",
			"file",
			"pick a",
			"Rep",
			"replace",
			"t::",
			"T::",
			"r::",
			"ShowCSVIntro",
			"SetStartPos",
			"StartPosAbsX",
			"Building",
			"after ",
			"debug",
			"+ len(r)",
			"width",
			" h",
			"square",
			"try:",
			"apply_",
			"transform",
			"count",
			"continue",
			"elseif",
			"elsif",
			"else if",
			"None",
			"count"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\n",
			"collaboration/0",
			"| \\1\\n|\\2\\n|\\3\\n|\\4\\n|\\5\\n|\\6\\n| [http://spilling.blood.ir/collaboration/\\1.tga]\\n|-\\n",
			"| \\1\\n|\\2\\n|\\3\\n|\\4\\n|\\5\\n| [http://spilling.blood.ir/collaboration/\\1.tga]\\n|-\\n",
			"| \\1\\n|\\2\\n|\\3\\n|\\4\\n|\\5\\n| http://spilling.blood.ir/collaboration/\\1.tga\\n|-\\n",
			"&",
			": ",
			"=",
			": ",
			"\\n",
			"\\1 ",
			"+ str(len(r))",
			"height",
			"param"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	{
		"mount_points":
		[
			"/C/code/qf/trunk",
			"/C/code/qf/Modular"
		]
	},
	"groups":
	[
		{
			"selected": 25,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/code/qf/trunk/qfconvert/blueprint.py",
					"settings":
					{
						"buffer_size": 9039,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								6009,
								6009
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 2137,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/code/qf/trunk/quickfort/lib/hotkeys.ahk",
					"settings":
					{
						"buffer_size": 8541,
						"regions":
						{
						},
						"selection":
						[
							[
								3964,
								3964
							]
						],
						"settings":
						{
							"syntax": "Packages/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 2510,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/code/qf/trunk/qfconvert/util.py",
					"settings":
					{
						"buffer_size": 1625,
						"regions":
						{
						},
						"selection":
						[
							[
								1625,
								1625
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 324,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 51252,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										181,
										186
									],
									[
										263,
										268
									],
									[
										440,
										445
									],
									[
										526,
										531
									],
									[
										798,
										803
									],
									[
										1213,
										1232
									],
									[
										1348,
										1367
									],
									[
										1637,
										1642
									],
									[
										1941,
										1946
									],
									[
										2464,
										2469
									],
									[
										2805,
										2810
									],
									[
										3004,
										3009
									],
									[
										3165,
										3170
									],
									[
										3231,
										3236
									],
									[
										3657,
										3662
									],
									[
										3754,
										3759
									],
									[
										4047,
										4052
									],
									[
										4311,
										4316
									],
									[
										4569,
										4574
									],
									[
										4687,
										4692
									],
									[
										4853,
										4858
									],
									[
										5158,
										5163
									],
									[
										5498,
										5503
									],
									[
										6117,
										6122
									],
									[
										6807,
										6812
									],
									[
										6880,
										6885
									],
									[
										7643,
										7648
									],
									[
										7885,
										7890
									],
									[
										8061,
										8066
									],
									[
										8080,
										8085
									],
									[
										8234,
										8239
									],
									[
										8373,
										8378
									],
									[
										8437,
										8442
									],
									[
										8588,
										8593
									],
									[
										8752,
										8757
									],
									[
										8820,
										8825
									],
									[
										9085,
										9090
									],
									[
										9157,
										9162
									],
									[
										9224,
										9229
									],
									[
										9350,
										9355
									],
									[
										9515,
										9520
									],
									[
										9581,
										9586
									],
									[
										9789,
										9794
									],
									[
										10016,
										10021
									],
									[
										10085,
										10090
									],
									[
										10169,
										10174
									],
									[
										10274,
										10279
									],
									[
										10362,
										10367
									],
									[
										10520,
										10525
									],
									[
										10637,
										10642
									],
									[
										10682,
										10687
									],
									[
										10763,
										10768
									],
									[
										10924,
										10929
									],
									[
										11024,
										11029
									],
									[
										11224,
										11229
									],
									[
										11278,
										11283
									],
									[
										11480,
										11485
									],
									[
										11506,
										11511
									],
									[
										11589,
										11594
									],
									[
										11692,
										11697
									],
									[
										11844,
										11849
									],
									[
										11886,
										11891
									],
									[
										11979,
										11984
									],
									[
										12043,
										12048
									],
									[
										12113,
										12118
									],
									[
										12157,
										12162
									],
									[
										12205,
										12210
									],
									[
										12250,
										12255
									],
									[
										12315,
										12320
									],
									[
										12502,
										12507
									],
									[
										12564,
										12569
									],
									[
										12601,
										12606
									],
									[
										12655,
										12660
									],
									[
										12752,
										12757
									],
									[
										12809,
										12814
									],
									[
										12966,
										12971
									],
									[
										13094,
										13099
									],
									[
										13294,
										13299
									],
									[
										13557,
										13562
									],
									[
										13774,
										13779
									],
									[
										13951,
										13956
									],
									[
										14069,
										14074
									],
									[
										14272,
										14277
									],
									[
										14466,
										14471
									],
									[
										14648,
										14653
									],
									[
										15001,
										15006
									],
									[
										15227,
										15232
									],
									[
										15444,
										15449
									],
									[
										15718,
										15723
									],
									[
										15915,
										15920
									],
									[
										16138,
										16143
									],
									[
										16239,
										16244
									],
									[
										16552,
										16557
									],
									[
										16742,
										16747
									],
									[
										16987,
										16992
									],
									[
										17189,
										17194
									],
									[
										17430,
										17435
									],
									[
										17570,
										17575
									],
									[
										17584,
										17589
									],
									[
										17656,
										17661
									],
									[
										17674,
										17679
									],
									[
										17825,
										17830
									],
									[
										17898,
										17903
									],
									[
										18078,
										18083
									],
									[
										18232,
										18237
									],
									[
										18357,
										18362
									],
									[
										18412,
										18417
									],
									[
										18545,
										18550
									],
									[
										18669,
										18674
									],
									[
										18839,
										18844
									],
									[
										18892,
										18897
									],
									[
										18938,
										18943
									],
									[
										18986,
										18991
									],
									[
										19113,
										19118
									],
									[
										19169,
										19174
									],
									[
										19332,
										19337
									],
									[
										19497,
										19502
									],
									[
										19661,
										19666
									],
									[
										19851,
										19856
									],
									[
										19949,
										19954
									],
									[
										20148,
										20153
									],
									[
										20250,
										20255
									],
									[
										20331,
										20336
									],
									[
										20476,
										20481
									],
									[
										20539,
										20544
									],
									[
										20584,
										20589
									],
									[
										20633,
										20638
									],
									[
										20699,
										20704
									],
									[
										20742,
										20747
									],
									[
										20808,
										20813
									],
									[
										20851,
										20856
									],
									[
										20988,
										20993
									],
									[
										21110,
										21115
									],
									[
										21411,
										21416
									],
									[
										21644,
										21649
									],
									[
										21791,
										21796
									],
									[
										21840,
										21845
									],
									[
										22090,
										22095
									],
									[
										22124,
										22129
									],
									[
										22231,
										22236
									],
									[
										22377,
										22382
									],
									[
										22571,
										22576
									],
									[
										22714,
										22719
									],
									[
										22937,
										22942
									],
									[
										23172,
										23177
									],
									[
										23376,
										23381
									],
									[
										23508,
										23513
									],
									[
										23749,
										23754
									],
									[
										24008,
										24013
									],
									[
										24125,
										24130
									],
									[
										24254,
										24259
									],
									[
										24544,
										24549
									],
									[
										24622,
										24627
									],
									[
										24787,
										24792
									],
									[
										24803,
										24808
									],
									[
										24980,
										24985
									],
									[
										25143,
										25148
									],
									[
										25224,
										25229
									],
									[
										25269,
										25274
									],
									[
										25322,
										25327
									],
									[
										25374,
										25379
									],
									[
										25462,
										25467
									],
									[
										25588,
										25593
									],
									[
										25670,
										25675
									],
									[
										25763,
										25768
									],
									[
										25927,
										25932
									],
									[
										26127,
										26132
									],
									[
										26139,
										26144
									],
									[
										26323,
										26328
									],
									[
										26525,
										26530
									],
									[
										26784,
										26789
									],
									[
										26990,
										26995
									],
									[
										27258,
										27263
									],
									[
										27435,
										27440
									],
									[
										27452,
										27457
									],
									[
										27680,
										27685
									],
									[
										27714,
										27719
									],
									[
										27980,
										27985
									],
									[
										28293,
										28298
									],
									[
										28559,
										28564
									],
									[
										28604,
										28609
									],
									[
										28836,
										28841
									],
									[
										29169,
										29174
									],
									[
										29295,
										29300
									],
									[
										29407,
										29412
									],
									[
										29428,
										29433
									],
									[
										29467,
										29472
									],
									[
										29706,
										29711
									],
									[
										29843,
										29848
									],
									[
										30122,
										30127
									],
									[
										30278,
										30283
									],
									[
										30325,
										30330
									],
									[
										30490,
										30495
									],
									[
										30663,
										30668
									],
									[
										31033,
										31038
									],
									[
										31092,
										31097
									],
									[
										31397,
										31402
									],
									[
										31612,
										31617
									],
									[
										31901,
										31906
									],
									[
										32050,
										32055
									],
									[
										32142,
										32147
									],
									[
										32217,
										32222
									],
									[
										32437,
										32442
									],
									[
										32472,
										32477
									],
									[
										32524,
										32529
									],
									[
										32783,
										32788
									],
									[
										32882,
										32887
									],
									[
										32954,
										32959
									],
									[
										33052,
										33057
									],
									[
										33118,
										33123
									],
									[
										33176,
										33181
									],
									[
										33279,
										33284
									],
									[
										33431,
										33436
									],
									[
										33610,
										33615
									],
									[
										33637,
										33642
									],
									[
										33804,
										33809
									],
									[
										33976,
										33981
									],
									[
										34096,
										34101
									],
									[
										34293,
										34298
									],
									[
										34537,
										34542
									],
									[
										34919,
										34924
									],
									[
										35264,
										35269
									],
									[
										35531,
										35536
									],
									[
										35600,
										35605
									],
									[
										35790,
										35795
									],
									[
										36046,
										36051
									],
									[
										36277,
										36282
									],
									[
										36317,
										36322
									],
									[
										36471,
										36476
									],
									[
										36651,
										36656
									],
									[
										36931,
										36936
									],
									[
										37211,
										37216
									],
									[
										37420,
										37425
									],
									[
										37514,
										37519
									],
									[
										37669,
										37674
									],
									[
										37784,
										37789
									],
									[
										38030,
										38035
									],
									[
										38058,
										38063
									],
									[
										38088,
										38093
									],
									[
										38311,
										38316
									],
									[
										38450,
										38455
									],
									[
										38514,
										38519
									],
									[
										38665,
										38670
									],
									[
										38829,
										38834
									],
									[
										38897,
										38902
									],
									[
										39162,
										39167
									],
									[
										39234,
										39239
									],
									[
										39301,
										39306
									],
									[
										39427,
										39432
									],
									[
										39592,
										39597
									],
									[
										39658,
										39663
									],
									[
										39866,
										39871
									],
									[
										40093,
										40098
									],
									[
										40162,
										40167
									],
									[
										40246,
										40251
									],
									[
										40351,
										40356
									],
									[
										40439,
										40444
									],
									[
										40597,
										40602
									],
									[
										40714,
										40719
									],
									[
										40759,
										40764
									],
									[
										40840,
										40845
									],
									[
										41001,
										41006
									],
									[
										41101,
										41106
									],
									[
										41301,
										41306
									],
									[
										41355,
										41360
									],
									[
										41557,
										41562
									],
									[
										41583,
										41588
									],
									[
										41666,
										41671
									],
									[
										41769,
										41774
									],
									[
										41921,
										41926
									],
									[
										41963,
										41968
									],
									[
										42056,
										42061
									],
									[
										42120,
										42125
									],
									[
										42190,
										42195
									],
									[
										42234,
										42239
									],
									[
										42282,
										42287
									],
									[
										42327,
										42332
									],
									[
										42392,
										42397
									],
									[
										42579,
										42584
									],
									[
										42641,
										42646
									],
									[
										42678,
										42683
									],
									[
										42732,
										42737
									],
									[
										42829,
										42834
									],
									[
										42886,
										42891
									],
									[
										43043,
										43048
									],
									[
										43171,
										43176
									],
									[
										43371,
										43376
									],
									[
										43634,
										43639
									],
									[
										43851,
										43856
									],
									[
										44028,
										44033
									],
									[
										44146,
										44151
									],
									[
										44349,
										44354
									],
									[
										44543,
										44548
									],
									[
										44725,
										44730
									],
									[
										45078,
										45083
									],
									[
										45304,
										45309
									],
									[
										45521,
										45526
									],
									[
										45795,
										45800
									],
									[
										45992,
										45997
									],
									[
										46215,
										46220
									],
									[
										46316,
										46321
									],
									[
										46629,
										46634
									],
									[
										46819,
										46824
									],
									[
										47064,
										47069
									],
									[
										47266,
										47271
									],
									[
										47507,
										47512
									],
									[
										47647,
										47652
									],
									[
										47661,
										47666
									],
									[
										47733,
										47738
									],
									[
										47751,
										47756
									],
									[
										47902,
										47907
									],
									[
										47975,
										47980
									],
									[
										48155,
										48160
									],
									[
										48309,
										48314
									],
									[
										48434,
										48439
									],
									[
										48489,
										48494
									],
									[
										48622,
										48627
									],
									[
										48746,
										48751
									],
									[
										48916,
										48921
									],
									[
										48969,
										48974
									],
									[
										49015,
										49020
									],
									[
										49063,
										49068
									],
									[
										49190,
										49195
									],
									[
										49246,
										49251
									],
									[
										49409,
										49414
									],
									[
										49574,
										49579
									],
									[
										49738,
										49743
									],
									[
										49928,
										49933
									],
									[
										50026,
										50031
									],
									[
										50225,
										50230
									],
									[
										50327,
										50332
									],
									[
										50408,
										50413
									],
									[
										50553,
										50558
									],
									[
										50616,
										50621
									],
									[
										50661,
										50666
									],
									[
										50710,
										50715
									],
									[
										50776,
										50781
									],
									[
										50819,
										50824
									],
									[
										50885,
										50890
									],
									[
										50928,
										50933
									],
									[
										51065,
										51070
									],
									[
										51187,
										51192
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								46324,
								46324
							]
						],
						"settings":
						{
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 21096,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/code/qf/trunk/qfconvert/keystroker.py",
					"settings":
					{
						"buffer_size": 14358,
						"regions":
						{
						},
						"selection":
						[
							[
								12905,
								12905
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 5917,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/My Dropbox/SublimeText2/Data/Packages/User/Base File.sublime-settings",
					"settings":
					{
						"buffer_size": 369,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/My Dropbox/SublimeText2/Data/Packages/User/Global.sublime-settings",
					"settings":
					{
						"buffer_size": 422,
						"regions":
						{
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/code/qf/trunk/qfconvert/config/interface.txt",
					"settings":
					{
						"buffer_size": 60583,
						"regions":
						{
						},
						"selection":
						[
							[
								16976,
								16922
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 13583,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/code/qf/trunk/qfconvert/aliases.py",
					"settings":
					{
						"buffer_size": 1448,
						"regions":
						{
						},
						"selection":
						[
							[
								876,
								876
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/My Dropbox/SublimeText2/Data/Packages/Python/Python.sublime-settings",
					"settings":
					{
						"buffer_size": 44,
						"regions":
						{
						},
						"selection":
						[
							[
								41,
								41
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/My Dropbox/SublimeText2/Data/Packages/Default/Base File.sublime-settings",
					"settings":
					{
						"buffer_size": 4755,
						"regions":
						{
						},
						"selection":
						[
							[
								1163,
								1163
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/code/qf/trunk/quickfort_stx.sublime-project",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0,
						"translation.y": 10746,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/C/code/qf/trunk/copyrelease.bat",
					"settings":
					{
						"buffer_size": 831,
						"regions":
						{
						},
						"selection":
						[
							[
								831,
								831
							]
						],
						"settings":
						{
							"syntax": "Packages/Batch File/Batch File.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/code/qf/trunk/qfconvert/geometry.py",
					"settings":
					{
						"buffer_size": 6477,
						"regions":
						{
						},
						"selection":
						[
							[
								3147,
								3147
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 3240,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/My Dropbox/SublimeText2/select.pyd",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/My Dropbox/SublimeText2/_ssl.pyd",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/C/code/qf/trunk/qfconvert/test.csv",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/C/code/qf/trunk/qfconvert/grid.py",
					"settings":
					{
						"buffer_size": 11482,
						"regions":
						{
						},
						"selection":
						[
							[
								4148,
								4148
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 1849,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/C/code/qf/trunk/qfconvert/areaplotter.py",
					"settings":
					{
						"buffer_size": 9465,
						"regions":
						{
						},
						"selection":
						[
							[
								1912,
								1912
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 540,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/C/code/qf/trunk/qfconvert/filereader.py",
					"settings":
					{
						"buffer_size": 7726,
						"regions":
						{
						},
						"selection":
						[
							[
								5580,
								5580
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 3078,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/C/code/qf/trunk/qfconvert/transformer.py",
					"settings":
					{
						"buffer_size": 9920,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 972,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/C/code/qf/trunk/qfconvert/config/buildconfig.json",
					"settings":
					{
						"buffer_size": 5193,
						"regions":
						{
						},
						"selection":
						[
							[
								2079,
								2079
							],
							[
								4594,
								4594
							],
							[
								5157,
								5157
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 1538,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/C/code/qf/trunk/qfconvert/config/aliases.txt",
					"settings":
					{
						"buffer_size": 3586,
						"regions":
						{
						},
						"selection":
						[
							[
								2016,
								2016
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 620,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/C/code/qf/trunk/quickfort/lib/df.ahk",
					"settings":
					{
						"buffer_size": 3799,
						"regions":
						{
						},
						"selection":
						[
							[
								3546,
								3546
							]
						],
						"settings":
						{
							"syntax": "Packages/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 2047,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/C/My Dropbox/code/ahk/foozykeys/foozykeys.ahk",
					"settings":
					{
						"buffer_size": 42582,
						"regions":
						{
						},
						"selection":
						[
							[
								20329,
								20329
							]
						],
						"settings":
						{
							"syntax": "Packages/AutoHotKey/AutoHotKey.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0,
						"translation.y": 13586,
						"zoom_level": 1
					},
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/C/code/qf/trunk/makezip.bat",
					"settings":
					{
						"buffer_size": 113,
						"regions":
						{
						},
						"selection":
						[
							[
								113,
								113
							]
						],
						"settings":
						{
							"syntax": "Packages/Batch File/Batch File.tmLanguage"
						},
						"translation.x": 0,
						"translation.y": 0,
						"zoom_level": 1
					},
					"type": "text"
				}
			]
		}
	],
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0,
			1
		],
		"rows":
		[
			0,
			1
		]
	},
	"menu_visible": true,
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0,
		"selected_items":
		[
			[
				"ali",
				"qfconvert/config/aliases.txt"
			],
			[
				"test",
				"qfconvert/test.csv"
			],
			[
				"stx",
				"quickfort_stx.sublime-project"
			],
			[
				"readme",
				"quickfort/readme.txt"
			],
			[
				"blu",
				"quickfort/lib/blueprint.ahk"
			],
			[
				"geom",
				"qfconvert/geometry.py"
			],
			[
				"geo",
				"qfconvert/geometry.py"
			]
		],
		"width": 0
	},
	"select_project":
	{
		"height": 500,
		"selected_items":
		[
			[
				"",
				"/c/my/stuff.sublime-project"
			]
		],
		"width": 380
	},
	"show_minimap": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 226,
	"status_bar_visible": true
}
